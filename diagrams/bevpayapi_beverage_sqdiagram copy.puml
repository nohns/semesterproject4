@startuml bevpayapi
Actor Frontend as frontend
participant BevController as bevcontroller
participant BevService as bevserv
participant BevRepository as bevrepo
participant NotificationService as notifserv
participant PricingEngine as pricingengine
Database MySQL as database

hide footbox

== Get all beverages ==

frontend -> bevcontroller: GET /beverages
activate bevcontroller
bevcontroller -> bevserv: GetAllBeverages()
activate bevserv
bevserv -> bevrepo: GetAll()
activate bevrepo
bevrepo -> database: // Fetch all beverages from the database //
activate database
database --> bevrepo
deactivate database
bevrepo --> bevserv: List<Beverage>
deactivate bevrepo
bevserv --> bevcontroller: List<Beverage>
deactivate bevserv
bevcontroller --> frontend: 200 OK
deactivate bevcontroller

== Get a beverage by its ID ==

frontend -> bevcontroller: GET /beverages/id
activate bevcontroller
bevcontroller -> bevserv: GetById(id)
activate bevserv
bevserv -> bevrepo: GetById(id)
activate bevrepo
bevrepo -> database: // Fetch a specific beverage from the database //
activate database
database --> bevrepo
deactivate database
bevrepo --> bevserv: Beverage
deactivate bevrepo
alt beverage == null
bevserv -> bevcontroller: throw NotFoundException()
bevcontroller --> frontend: 404 Not Found
end
bevserv --> bevcontroller: Beverage
deactivate bevserv
bevcontroller --> frontend: 200 OK
deactivate bevcontroller

== Create a new beverage ==

frontend -> bevcontroller: POST /beverages
activate bevcontroller
bevcontroller -> bevserv: Create(dto)
activate bevserv
bevserv -> bevserv: Validate...(dto)
note right
    Validation of the content of the DTO.
    Things like the price, halftime, buymultiplier are checked for correct values.
end note
alt dto is not valid
bevserv -> bevcontroller: throw ValidationException()
bevcontroller --> frontend: 400 Bad Request
end
bevserv -> bevserv: dto.ToBeverage()
bevserv -> bevrepo: Create(beverage)
activate bevrepo
bevrepo -> database: // Save a new beverage to the database //
activate database
database --> bevrepo
deactivate database
bevrepo --> bevserv: Beverage
deactivate bevrepo
bevserv -> notifserv: SendBeverageCreatedNotification(beverage)
activate notifserv
notifserv -> pricingengine: POST /beverageCreated
deactivate notifserv
bevserv --> bevcontroller: Beverage
deactivate bevserv
bevcontroller --> frontend: 201 Created
deactivate bevcontroller

== Update a beverage ==

frontend -> bevcontroller: PUT /beverages/id
activate bevcontroller
bevcontroller -> bevserv: Update(dto)
activate bevserv
bevserv -> bevrepo: GetById(id)
activate bevrepo
bevrepo -> database: // Fetch a specific beverage from the database //
activate database
database --> bevrepo
deactivate database
bevrepo --> bevserv: Beverage
deactivate bevrepo
alt beverage == null
bevserv -> bevcontroller: throw NotFoundException()
bevcontroller --> frontend: 404 Not Found
end
bevserv -> bevserv: Validate...(dto)
note right
    Validation identical to the one prior
    in the "Create a new beverage" section.
end note
alt dto is not valid
bevserv -> bevcontroller: throw ValidationException()
bevcontroller --> frontend: 400 Bad Request
end
bevserv -> bevserv: dto.ToBeverage(existingBeverage)
bevserv -> bevrepo: Update(beverage)
activate bevrepo
bevrepo -> database: // Update a specific beverage in the database //
activate database
database --> bevrepo
deactivate database
bevrepo --> bevserv: Beverage
deactivate bevrepo
bevserv -> notifserv: SendBeverageUpdatedNotification(beverage)
activate notifserv
notifserv -> pricingengine: POST /beverageUpdated
deactivate notifserv
bevserv --> bevcontroller: Beverage
deactivate bevserv
bevcontroller --> frontend: 200 OK
deactivate bevcontroller

== Delete a beverage ==

frontend -> bevcontroller: DELETE /beverages/id
activate bevcontroller
bevcontroller -> bevserv: Delete(id)
activate bevserv
bevserv -> bevrepo: GetById(id)
activate bevrepo
bevrepo -> database: // Fetch a specific beverage from the database //
activate database
database --> bevrepo
deactivate database
bevrepo --> bevserv: Beverage
deactivate bevrepo
alt bev == null
bevserv -> bevcontroller: throw NotFoundException()
bevcontroller --> frontend: 404 Not Found
end
bevserv -> bevrepo: Delete(id)
activate bevrepo
bevrepo -> database: // Delete a specific beverage in the database //
deactivate bevrepo
bevserv -> notifserv: SendBeverageDeletedNotification(beverage)
deactivate bevserv
activate notifserv
notifserv -> pricingengine: POST /beverageDeleted
deactivate notifserv
bevcontroller --> frontend: 204 No Content
deactivate bevcontroller

@enduml